{"version":3,"sources":["shared/components/UIElements/Card.js","shared/Util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","users/pages/Auth.js"],"names":["Card","props","className","style","children","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test","inputReducer","state","action","isTouched","Input","useReducer","initialValue","initialValid","inputState","dispatch","onInput","id","useEffect","changeHandler","event","target","touchHandler","element","rows","onBlur","onChange","placeholder","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","pickedFile","fileIsValid","files","center","src","alt","onClick","current","click","Auth","isLoggedIn","setIsLoggedIn","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authCtx","useContext","AuthContext","navigate","useNavigate","loginFormSubmitHandler","e","a","preventDefault","console","log","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","onClear","asOverlay","onSubmit","disabled","inverse","undefined","prevValue"],"mappings":"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","file":"static/js/4.dda1196c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useEffect, useReducer } from \"react\";\n\nimport { validate } from \"../../Util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isValid: props.initialValid || false,\n    isTouched: false,\n  });\n\n  const { onInput, id } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [onInput, id, value, isValid]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({ type: \"TOUCH\" });\n  };\n\n  const element =\n    props.element === \"textarea\" ? (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        value={inputState.value}\n        onBlur={touchHandler}\n        onChange={changeHandler}\n      />\n    ) : (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        value={inputState.value}\n        onBlur={touchHandler}\n        onChange={changeHandler}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        formIsValid: action.formIsValid,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback(\n    (id, value, isValid) => {\n      dispatch({\n        type: \"INPUT_CHANGE\",\n        value: value,\n        isValid: isValid,\n        inputId: id,\n      });\n    },\n    [dispatch]\n  );\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"./Button\";\n\nimport \"./ImageUpload.css\";\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  const pickedImageHandler = (event) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        type=\"file\"\n        ref={filePickerRef}\n        style={{ display: \"none\" }}\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedImageHandler}\n        id={props.id}\n      />\n      <div className={`image-upload ${props.center && \"center\"}`}>\n        <div className=\"image-upload__preview\">\n          {previewUrl && <img src={previewUrl} alt=\"preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        </div>\n        <Button onClick={pickImageHandler} type=\"button\">\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { Fragment, useContext, useState } from \"react\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/Util/validators\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./Auth.css\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\nconst Auth = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(true);\n\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const authCtx = useContext(AuthContext);\n\n  const navigate = useNavigate();\n\n  const loginFormSubmitHandler = async (e) => {\n    e.preventDefault();\n\n    console.log(formState.inputs);\n\n    if (isLoggedIn) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            \"Content-Type\": \"application/json\",\n          }\n        );\n\n        authCtx.login(responseData.userId, responseData.token);\n        navigate(\"/\");\n      } catch (error) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append(\"name\", formState.inputs.name.value);\n        formData.append(\"image\", formState.inputs.image.value);\n        formData.append(\"email\", formState.inputs.email.value);\n        formData.append(\"password\", formState.inputs.password.value);\n\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\n          \"POST\",\n          formData\n        );\n\n        authCtx.login(responseData.userId, responseData.token);\n        navigate(\"/\");\n      } catch (error) {}\n    }\n  };\n\n  const switchModeHandler = () => {\n    if (!isLoggedIn) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoggedIn((prevValue) => !prevValue);\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2 className=\"authentication_header\">Login Required</h2>\n        <hr />\n        <form onSubmit={loginFormSubmitHandler}>\n          {!isLoggedIn && (\n            <Input\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE]}\n              errorText=\"Please enter a valid name\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoggedIn && (\n            <ImageUpload center id=\"image\" onInput={inputHandler} />\n          )}\n          <Input\n            id=\"email\"\n            type=\"email\"\n            label=\"Email\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email\"\n            onInput={inputHandler}\n          />\n          <Input\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password (min. 6 characters)\"\n            onInput={inputHandler}\n          />\n          <Button disabled={!formState.isValid}>\n            {isLoggedIn ? \"Login\" : \"Sign Up\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          Switch to {isLoggedIn ? \"Sign Up\" : \"Login\"}\n        </Button>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}