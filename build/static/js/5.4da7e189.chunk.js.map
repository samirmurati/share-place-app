{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/AllPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useState","showMap","setShowMap","deleteIsClicked","setDeleteIsClicked","useHttpClient","sendRequest","isLoading","error","clearError","authCtx","useContext","AuthContext","closeMapHandler","useParams","placeId","useNavigate","deleteConfirmHandler","a","process","id","Authorization","token","onDelete","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","location","userId","creatorId","to","PlaceList","items","length","place","creator","onDeletePlace","AllPlaces","allPlaces","setAllPlaces","getAllUsers","response","places","Fragment","placeID","prevPlaces","filter"],"mappings":"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","file":"static/js/5.4da7e189.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./Map.css\";\n\nconst Map = (props) => {\n  const mapRef = useRef();\n  const { center, zoom } = props;\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom,\n    });\n\n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);\n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { Fragment, useContext, useState } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UIElements/Modal\";\nimport \"./PlaceItem.css\";\nimport Map from \"../../shared/components/UIElements/Map\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nconst PlaceItem = (props) => {\n  const [showMap, setShowMap] = useState(false);\n  const [deleteIsClicked, setDeleteIsClicked] = useState(false);\n\n  const { sendRequest, isLoading, error, clearError } = useHttpClient();\n\n  const authCtx = useContext(AuthContext);\n  const placeId = useParams().placeId;\n  const navigate = useNavigate();\n\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n\n  const deleteConfirmHandler = async () => {\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\n        \"DELETE\",\n        null,\n        {\n          Authorization: \"Bearer \" + authCtx.token,\n        }\n      );\n      props.onDelete(props.id);\n    } catch (error) {}\n\n    setDeleteIsClicked(false);\n  };\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={() => clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16} />\n        </div>\n      </Modal>\n\n      <Modal\n        show={deleteIsClicked}\n        onCancel={() => setDeleteIsClicked(false)}\n        header=\"Are you sure\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <Fragment>\n            <Button inverse onClick={() => setDeleteIsClicked(false)}>\n              CANCEL\n            </Button>\n            <Button danger onClick={deleteConfirmHandler}>\n              DELETE\n            </Button>\n          </Fragment>\n        }\n      >\n        <p>\n          Are you sure you want to delete this Place? Please note that it can't\n          be undone thereafter\n        </p>\n      </Modal>\n\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n            <p>{props.location}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {authCtx.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {authCtx.userId === props.creatorId && (\n              <Button danger onClick={() => setDeleteIsClicked(true)}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from \"react\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport PlaceItem from \"./PlaceItem\";\nimport \"./PlaceList.css\";\n\nconst PlaceList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Maybe create one?</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <ul className=\"place-list center\">\n      {props.items.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport PlaceList from \"../components/PlaceList\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./AllPlaces.css\";\n\nconst AllPlaces = () => {\n  const [allPlaces, setAllPlaces] = useState();\n\n  const { sendRequest, isLoading, error, clearError } = useHttpClient();\n\n  useEffect(() => {\n    const getAllUsers = async () => {\n      try {\n        const response = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/places/all-places\"\n        );\n        setAllPlaces(response.places);\n      } catch (err) {}\n    };\n    getAllUsers();\n  }, [sendRequest]);\n\n  const deletePlaceHandler = (placeID) => {\n    setAllPlaces((prevPlaces) =>\n      prevPlaces.filter((places) => places.id !== placeID)\n    );\n  };\n\n  if (isLoading) {\n    return <LoadingSpinner asOverlay />;\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && allPlaces && (\n        <PlaceList items={allPlaces} onDeletePlace={deletePlaceHandler} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default AllPlaces;\n"],"sourceRoot":""}