{"version":3,"sources":["shared/components/UIElements/Card.js","shared/Util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","places/pages/UpdatePlace.js"],"names":["Card","props","className","style","children","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test","inputReducer","state","action","isTouched","Input","useReducer","initialValue","initialValid","inputState","dispatch","onInput","id","useEffect","changeHandler","event","target","touchHandler","element","rows","onBlur","onChange","placeholder","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","UpdatePlace","useState","loadedPlace","setLoadedPlace","useHttpClient","sendRequest","isLoading","error","clearError","placeId","useParams","navigate","useNavigate","authCtx","useContext","AuthContext","title","description","inputHandler","setFormData","fetchPlace","a","process","responseData","place","Fragment","onClear","onSubmit","preventDefault","JSON","stringify","Authorization","token","setTimeout","userId","disabled"],"mappings":"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","file":"static/js/8.b3ed7cfe.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useEffect, useReducer } from \"react\";\n\nimport { validate } from \"../../Util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isValid: props.initialValid || false,\n    isTouched: false,\n  });\n\n  const { onInput, id } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [onInput, id, value, isValid]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({ type: \"TOUCH\" });\n  };\n\n  const element =\n    props.element === \"textarea\" ? (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        value={inputState.value}\n        onBlur={touchHandler}\n        onChange={changeHandler}\n      />\n    ) : (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        value={inputState.value}\n        onBlur={touchHandler}\n        onChange={changeHandler}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        formIsValid: action.formIsValid,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback(\n    (id, value, isValid) => {\n      dispatch({\n        type: \"INPUT_CHANGE\",\n        value: value,\n        isValid: isValid,\n        inputId: id,\n      });\n    },\n    [dispatch]\n  );\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/Util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./PlaceForm.css\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nconst UpdatePlace = () => {\n  const [loadedPlace, setLoadedPlace] = useState();\n  const { sendRequest, isLoading, error, clearError } = useHttpClient();\n\n  const placeId = useParams().placeId;\n  const navigate = useNavigate();\n  const authCtx = useContext(AuthContext);\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const updatePlaceFormHandler = (event) => {\n    event.preventDefault();\n\n    try {\n      sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + authCtx.token,\n        }\n      );\n      setTimeout(() => {\n        navigate(`/${authCtx.userId}/places`);\n      }, 50);\n    } catch (error) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={updatePlaceFormHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={formState.inputs.title.isValid}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={formState.inputs.title.isValid}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"],"sourceRoot":""}